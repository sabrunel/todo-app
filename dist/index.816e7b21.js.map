{"mappings":"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","sources":["src/app.js"],"sourcesContent":["class TodoItemModel {\n    constructor(title, isComplete=false) {\n        // this.id = new Date().getTime();\n        this.id = Math.floor(Math.random() * 100); // Used temporarily until we don't need pre-generated dummy todos\n        this.title = title;\n        this.isComplete = isComplete;\n    }\n}\n\nclass ProjectModel {\n    constructor() {\n        this.todos = [\n            new TodoItemModel(\"Tidy up library\"),\n            new TodoItemModel(\"Feed dragon\", true)\n            ];\n    }\n\n    addToDo(todo) {\n        this.todos.push(todo);\n    }\n\n    deleteToDo(id) {\n        this.todos = this.todos.filter((todo) => todo.id !== id)\n    }\n}\n\nclass AppView {\n    constructor() {\n        this.app = document.getElementById('todos');\n        this.form = document.querySelector('form');\n        this.addBtn = document.getElementById('add-btn');\n        this.confirmAddTodoBtn = document.getElementById('add-todo');\n    }\n\n    get todoTitle() {\n        return document.getElementById(\"todo-title\").value;\n    }\n\n    get todoStatus() {\n        return document.getElementById(\"todo-status\").checked;\n    }\n\n\n    createElement(tag, className) {\n        const element = document.createElement(tag);\n\n        if (className) {\n            element.className = className;\n        }\n        return element\n    }\n\n    createTodoElement(todo) {\n        const todoElement = this.createElement('li', 'todo-item');\n        todoElement.innerHTML = `\n         <div id=${todo.id}>\n            <div class=\"todo__title\">\n                <h2>${todo.title}</h2>\n            </div>\n            <div class=\"todo__options\">\n                <div class=\"status-checkbox\">\n                    <input type=\"checkbox\" name=\"todo-status\" class=\"todo-status\" ${\n                        todo.isComplete ? \"checked\" : \"\"\n                    }>\n                </div>\n                <button class=\"delete-todo\"> Delete </button>\n            </div>\n        </div>\n        `;\n    return todoElement;\n    }\n\n    createTodoListElement(todos) {\n        const todoList = this.createElement('ul', 'todo-list');\n\n        todos.forEach(todo => {\n            const todoElement = this.createTodoElement(todo);\n            todoList.appendChild(todoElement);\n            console.log(todo);\n        })\n        return todoList;\n      }\n\n    enableAddToDo(handler) {\n        this.form.addEventListener('submit', event => {\n            event.preventDefault()\n\n            const todo = new TodoItemModel(this.todoTitle, this.todoStatus);\n            handler(todo);\n        })\n    }\n\n    enableDeleteTodo(handler) {\n        const todoListElement = document.querySelector(\"ul\");\n\n        todoListElement.addEventListener(\"click\", e => {\n            if (e.target.className === 'delete-todo') {\n                const id = parseInt(e.target.parentElement.parentElement.id);\n                handler(id);\n            }\n        })\n    }\n  \n    render(todos) {\n        // Clear existing todos\n        while (this.app.firstChild) {\n            this.app.removeChild(this.app.lastChild);\n        }\n\n        // Create and render the list of todos\n        const todoListElement = this.createTodoListElement(todos);\n        this.app.appendChild(todoListElement);\n    }\n}\n\nclass AppController {\n    constructor(model, view) {\n        this.model = model;\n        this.view = view;\n\n        this.updateApp();\n\n        // Bind handler functions\n        this.view.enableAddToDo(this.addTodoHandler);\n        this.view.enableDeleteTodo(this.deleteTodoHandler);\n    }\n\n    updateApp() {\n        this.view.render(this.model.todos);\n    }\n\n    addTodoHandler = todo => {\n        this.model.addToDo(todo);\n        this.updateApp();\n    }\n\n    deleteTodoHandler = id => {\n        this.model.deleteToDo(id);\n        this.updateApp();\n    }\n}\n\nconst app = new AppController(new ProjectModel(), new AppView());\n"],"names":[],"version":3,"file":"index.816e7b21.js.map","sourceRoot":"/__parcel_source_root/"}